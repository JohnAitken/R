dir.create(output_dir, showWarnings = FALSE)
# Split the PDF into individual pages
pdf_pages <- pdf_split(pdf_file, output = output_dir)
# Initialize a list to store text from each page
all_text <- list()
# Loop over each page and perform OCR
for (page_file in pdf_pages) {
# Perform OCR on the current page
text <- ocr(page_file, engine = eng)
# Append the text to the list
all_text[[basename(page_file)]] <- text
}
# Convert the list of text to a data frame
df <- data.frame(do.call(cbind, all_text), stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# Remove individual pages after processing
file.remove(pdf_pages)
View(df)
View(all_text)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
pdf_file <- "10088075_10055_202324.pdf"
text <- ocr(pdf_file, engine = eng)
# Split the text by newline characters
text_lines <- strsplit(text, "\n")[[1]]
# Create a data frame with the text as columns
df <- data.frame(text_lines, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# List all files with a ".png" extension in the working directory
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete HAVE TO FIX THis
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
}
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
pdf_file <- "10088075_10055_202324.pdf"
text <- ocr(pdf_file, engine = eng)
# Split the text by newline characters
text_lines <- strsplit(text, "\n")[[2]]
# Create a data frame with the text as columns
df <- data.frame(text_lines, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# List all files with a ".png" extension in the working directory
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete HAVE TO FIX THis
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
}
View(df)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Initialize a list to store text from each page
all_text <- list()
# Loop through pages 2 to 5
for (page_num in 2:5) {
# Perform OCR on the current page
text <- ocr(pdf_file, engine = eng, pages = page_num)
# Split the text by newline characters
text_lines <- strsplit(text, "\n")[[1]]
# Store the text in a list with a variable name
all_text[[paste0("text_lines_", page_num)]] <- text_lines
}
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Get the total number of pages in the PDF
num_pages <- pdf_info(pdf_file)$pages
# Define a custom function to perform OCR for a given page
perform_ocr <- function(page_num) {
text <- ocr(pdf_file, engine = eng, pages = page_num)
text_lines <- strsplit(text, "\n")[[1]]
return(data.frame(text_lines, stringsAsFactors = FALSE))
}
# Use lapply to apply the custom function to each page
all_text <- lapply(1:num_pages, perform_ocr)
library(tesseract)
library(tidyverse)
library(fs)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Create a temporary directory to store individual pages
temp_dir <- tempfile(pattern = "pdf_pages_", fileext = "")
dir.create(temp_dir)
# Use pdftocairo to convert PDF to PNG images
system(paste("pdftocairo", pdf_file, file.path(temp_dir, "page"), "-png"))
# List all PNG files in the temporary directory
png_files <- list.files(temp_dir, pattern = "\\.png$", full.names = TRUE)
# Initialize a list to store text from each page
all_text <- list()
# Perform OCR for each PNG image
for (png_file in png_files) {
text <- ocr(png_file, engine = eng)
text_lines <- strsplit(text, "\n")[[1]]
all_text[[basename(png_file)]] <- text_lines
}
# Combine the results into a single data frame
df <- data.frame(all_text, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# Remove temporary directory with individual pages
fs::dir_delete(temp_dir, recursive = TRUE)
library(tesseract)
library(tidyverse)
library(fs)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Create a temporary directory to store individual pages
temp_dir <- tempfile(pattern = "pdf_pages_", fileext = "")
dir.create(temp_dir)
# Use pdftocairo to convert PDF to PNG images
system(paste("pdftocairo", pdf_file, file.path(temp_dir, "page"), "-png"))
# List all PNG files in the temporary directory
png_files <- list.files(temp_dir, pattern = "\\.png$", full.names = TRUE)
# Initialize a list to store text from each page
all_text <- list()
# Perform OCR for each PNG image
for (png_file in png_files) {
text <- ocr(png_file, engine = eng)
text_lines <- strsplit(text, "\n")[[1]]
all_text[[basename(png_file)]] <- text_lines
}
# Combine the results into a single data frame
df <- data.frame(all_text, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# Remove temporary directory with individual pages
unlink(temp_dir, recursive = TRUE)
library(pdftools)
pdf_info("10088075_10055_202324.pdf")
library(pdftools)
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Extract text from the PDF
pdf_text <- pdf_text(pdf_file)
# Split the text by newline characters
text_lines <- strsplit(pdf_text, "\n")[[1]]
# Create a data frame with the text as columns
df <- data.frame(text_lines, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
pdf_file <- "10088075_10055_202324.pdf"
text <- ocr(pdf_file, engine = eng)
# Split the text by newline characters
text_lines <- strsplit(text, "\n")[[3]]
# Create a data frame with the text as columns
df <- data.frame(text_lines, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# List all files with a ".png" extension in the working directory
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete HAVE TO FIX THis
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
}
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
pdf_file <- "10088075_10055_202324.pdf"
text <- ocr(pdf_file, engine = eng)
# Split the text by newline characters
text_lines1 <- strsplit(text, "\n")[[2]]
text_lines2 <- strsplit(text, "\n")[[3]]
text_lines3 <- strsplit(text, "\n")[[4]]
text_lines4 <- strsplit(text, "\n")[[5]]
# Create a data frame with the text as columns
df <- data.frame(text_lines, stringsAsFactors = FALSE)
# Print the resulting data frame
print(df)
# List all files with a ".png" extension in the working directory
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete HAVE TO FIX THis
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
}
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store text for each page
all_text <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Assign to a dynamically created variable
assign(paste0("text_lines", page_num - 1), text_lines)
# Store in the list
all_text[[page_num - 1]] <- text_lines
}
# Combine the results into a single data frame
df <- data.frame(all_text, stringsAsFactors = FALSE)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Store in the list along with page number
all_results <- c(all_results, list(data.frame(text_lines = text_lines, page = page_num - 1)))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Create a data frame with text_lines, page, and index columns
result_df <- data.frame(
text_lines = text_lines,
page = page_num - 1,
index = seq_along(text_lines)
)
# Store in the list
all_results <- c(all_results, list(result_df))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Create a data frame with index, page, and text_lines columns
result_df <- data.frame(
index = seq_along(text_lines),
page = page_num - 1,
text_lines = text_lines
)
# Store in the list
all_results <- c(all_results, list(result_df))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
# VERSION 3
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Create a data frame with index, page, text_lines, and pdf_file columns
result_df <- data.frame(
index = seq_along(text_lines),
page = page_num - 1,
text_lines = text_lines,
pdf_file = pdf_file
)
# Store in the list
all_results <- c(all_results, list(result_df))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Create a data frame with index, page, text_lines, and pdf_file columns
result_df <- data.frame(
index = seq_along(text_lines),
page = page_num - 1,
text_lines = text_lines,
pdf_file = pdf_file
)
# Store in the list
all_results <- c(all_results, list(result_df))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
# Delete the PNGs in folder
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
}
# Record the start time
start_time <- Sys.time()
# Your existing code here
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Create a data frame with index, page, text_lines, and pdf_file columns
result_df <- data.frame(
index = seq_along(text_lines),
page = page_num - 1,
text_lines = text_lines,
pdf_file = pdf_file
)
# Store in the list
all_results <- c(all_results, list(result_df))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
# Delete the PNGs in folder
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
# Record the end time
end_time <- Sys.time()
# Calculate the elapsed time
elapsed_time <- end_time - start_time
# Print the elapsed time
cat("Elapsed time:", format(elapsed_time, units = "secs"), "\n")
}
# Record the start time
start_time <- Sys.time()
# Your existing code here
library(tesseract)
library(tidyverse)
# Set the working directory
setwd("C:/Users/JA/Documents/Git_Repositories/R/pdfScrapeDev")
# Initialize tesseract engine for English
eng <- tesseract("eng")
# Specify the PDF file
pdf_file <- "10088075_10055_202324.pdf"
# Perform OCR to get the concatenated text for all pages
text <- ocr(pdf_file, engine = eng)
# Define the number of pages
num_pages <- 4  # Update with the actual number of pages
# Initialize a list to store results
all_results <- list()
# Loop through pages 2 to num_pages+1
for (page_num in 2:(num_pages + 1)) {
text_lines <- strsplit(text, "\n")[[page_num]]
# Create a data frame with index, page, text_lines, and pdf_file columns
result_df <- data.frame(
index = seq_along(text_lines),
page = page_num - 1,
text_lines = text_lines,
pdf_file = pdf_file
)
# Store in the list
all_results <- c(all_results, list(result_df))
}
# Combine the results into a single data frame
df <- do.call(rbind, all_results)
# Print the resulting data frame
print(df)
# Delete the PNGs in folder
png_files <- list.files(pattern = "\\.png$")
# Check if there are any files to delete
if (length(png_files) > 0) {
# Remove all files with a ".png" extension
file.remove(png_files)
cat("Deleted", length(png_files), "PNG files.\n")
} else {
cat("No PNG files found in the working directory.\n")
}
# Record the end time
end_time <- Sys.time()
# Calculate the elapsed time
elapsed_time <- end_time - start_time
# Print the elapsed time
cat("Elapsed time:", format(elapsed_time, units = "secs"), "\n")
View(df)
