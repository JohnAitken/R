install.packages("Rcmdr")
setwd("~/Documents/R")
plot(x=1:10,y=2:11)
read.table(file = file)\
plot(x=1:10,y=2:11)
plot(x=1:10,y=2:11)
\
1:10
demo()
Hershey
plot(x=1:10,y=2:11)
library(tidyverse)
library(ggplot2)
df <- read.csv("Final_Dropoff_Data_xl.csv") %>%
count(Count, wt=Count) %>%
rename(dropoffs = n)
p <- ggplot(df, aes(Count, dropoffs, colour=Count)) +
geom_point()
p
library(tidyverse)
library(ggplot2)
df <- read.csv("Final_Dropoff_Data_xl.csv") %>%
count(Count, wt=Count) %>%
rename(dropoffs = n)
p <- ggplot(df, aes(Count, dropoffs, colour=Count)) +
geom_line()
p
library(tidyverse)
library(ggplot2)
df <- read.csv("Final_Dropoff_Data_xl.csv") %>%
count(Count, wt=Count) %>%
rename(dropoffs = n)
p <- ggplot(df, aes(Count, dropoffs)) +
geom_line()
p
install.packages("shiny")
install.packages("learnr")
library(tidyverse)
#load the data and group by provider count per dropoff level
df <- read.csv("roll_20_items.csv")
View(df)
armor <- df %>%
filter(type == 'armor')
View(armor)
filter(grepl('armor', type)
armor <- df %>%
armor <- df %>%
filter(grepl('armor', type))
View(armor)
<!-- README.md is generated from README.Rmd. Please edit that file -->
reticulate::repl_python()
exit
reticulate::repl_python()
print(f"The factorial of {number} is {result}")
3
6
quit
reticulate::repl_python()
quit
reticulate::source_python('~/Git_Repositories/R/pytest.py')
## Overview
dplyr is a grammar of data manipulation, providing a consistent set of
install.packages('Tinytex')
install.packages('tinytex')
quarto render quarto_R-test.qmd
quarto render quarto_Rtest.qmd
#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess")
test <- rep(1:10,by=2,each=3,times=2)
reticulate::repl_python()
library(shiny)
library(shiny)
# Define the user interface
ui <- fluidPage(
titlePanel("Episode Filter App"),
sidebarLayout(
sidebarPanel(
textInput("filter_value", "Enter the value to filter by:"),
actionButton("filter_button", "Filter"),
downloadButton("download_button", "Download Master List")
),
mainPanel(
verbatimTextOutput("episode_summary"),
verbatimTextOutput("cast_list")
)
)
)
# Define the server logic
server <- function(input, output) {
# Read the CSV files
dwguide <- read.csv("dwguide_clean.csv", stringsAsFactors = FALSE)
castlist <- read.csv("castlist.csv", stringsAsFactors = FALSE)
# Merge data frames
jd <- merge(dwguide, castlist, by = "episodenbr", all.x = TRUE)
# Function to filter data
filter_data <- function() {
filter_value <- tolower(input$filter_value)
jd$title <- tolower(jd$title)
filtered_df <- jd[jd$title == filter_value, ]
return(filtered_df)
}
# Render episode summary
output$episode_summary <- renderPrint({
filtered_df <- filter_data()
if (nrow(filtered_df) > 0) {
cat("Episode summary\n")
filtered_df_1 <- head(filtered_df, 1) %>%
select(-role, -name)
print(filtered_df_1, row.names = FALSE)
} else {
cat(paste("No rows found with title equal to", input$filter_value, "\n"))
}
})
# Render cast list
output$cast_list <- renderPrint({
filtered_df <- filter_data()
if (nrow(filtered_df) > 0) {
cat("\nThe Cast:\n")
filtered_df_2 <- filtered_df %>%
select(role, name)
print(filtered_df_2, row.names = FALSE)
}
})
# Define a reactive expression to download the master list
master_list_data <- eventReactive(input$filter_button, {
filtered_df <- filter_data()
return(filtered_df)
})
# Allow users to download the master list
output$download_button <- downloadHandler(
filename = function() {
"master_list.csv"
},
content = function(file) {
write.csv(master_list_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui, server)
clear
# Define the server logic
library(shiny)
# Define the user interface
ui <- fluidPage(
titlePanel("Episode Filter App"),
sidebarLayout(
sidebarPanel(
textInput("filter_value", "Enter the value to filter by:"),
actionButton("filter_button", "Filter"),
downloadButton("download_button", "Download Master List")
),
mainPanel(
verbatimTextOutput("episode_summary"),
verbatimTextOutput("cast_list")
)
)
)
# Define the server logic
server <- function(input, output) {
# Read the CSV files
dwguide <- read.csv("dwguide_clean.csv", stringsAsFactors = FALSE)
castlist <- read.csv("castlist.csv", stringsAsFactors = FALSE)
# Merge data frames
jd <- merge(dwguide, castlist, by = "episodenbr", all.x = TRUE)
# Function to filter data
filter_data <- function() {
filter_value <- tolower(input$filter_value)
jd$title <- tolower(jd$title)
filtered_df <- jd[jd$title == filter_value, ]
return(filtered_df)
}
# Render episode summary
output$episode_summary <- renderPrint({
filtered_df <- filter_data()
if (nrow(filtered_df) > 0) {
cat("Episode summary\n")
filtered_df_1 <- head(filtered_df, 1) %>%
select(-role, -name)
print(filtered_df_1, row.names = FALSE)
} else {
cat(paste("No rows found with title equal to", input$filter_value, "\n"))
}
})
# Render cast list
output$cast_list <- renderPrint({
filtered_df <- filter_data()
if (nrow(filtered_df) > 0) {
cat("\nThe Cast:\n")
filtered_df_2 <- filtered_df %>%
select(role, name)
print(filtered_df_2, row.names = FALSE)
}
})
# Define a reactive expression to download the master list
master_list_data <- eventReactive(input$filter_button, {
filtered_df <- filter_data()
return(filtered_df)
})
# Allow users to download the master list
output$download_button <- downloadHandler(
filename = function() {
"master_list.csv"
},
content = function(file) {
write.csv(master_list_data(), file)
}
)
}
# Run the Shiny app
shinyApp(ui, server)
install.packages('officedown')
